{"version":3,"sources":["Components/ColorTable/close-color-row.tsx","Components/ColorTable/color-row.tsx","Components/ColorTable/color-table.tsx","Components/color-tool.tsx","App.tsx","index.tsx","registerServiceWorker.ts"],"names":["CloseColorRow","props","brand","closeColor","color","visible","className","smooth","to","toLowerCase","number","description","style","backgroundColor","rgbCode","height","ColorRow","colors","React","expanded","setExpanded","onRowClick","onClick","id","substitute","Object","keys","map","key","undefined","distances","slice","title","colSpan","ColorTable","filteredColors","DEFAULT_ARRAY","ColorTool","filterText","setFilterText","appliedFilter","setAppliedFilter","filter","colorId","includes","timer","applyFilter","trimmedFilter","trim","current","window","clearTimeout","setTimeout","onInputChanged","event","target","value","type","onChange","placeholder","allColors","require","brands","RoutedApp","brandParam","useParams","find","brandName","App","basename","path","ReactDOM","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.4ed20989.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport { Color } from '../../Models/color';\r\n\r\n\r\ninterface CloseColorRowProps {\r\n    color: Color;\r\n    closeColor: Color;\r\n    visible: boolean;\r\n    brand: string;\r\n}\r\n\r\nexport const CloseColorRow = (props: CloseColorRowProps) => {\r\n    const { brand, closeColor, color, visible } = props;\r\n    return visible ? (\r\n        <div className='row inner'>\r\n            <div className='col-2 text-center vertically-centered'><HashLink smooth to={`/${brand.toLowerCase()}#${closeColor.number}`}>{closeColor.number}</HashLink></div>\r\n            <div className='col-4 vertically-centered'>{closeColor.description}</div>\r\n            <div className='col-3' style={{backgroundColor: '#' + closeColor.rgbCode, height: '38px'}} />\r\n            <div className='col-3' style={{backgroundColor: '#' + color.rgbCode, height: '38px'}} />\r\n        </div>\r\n    ) : null;\r\n}\r\n","import * as React from 'react';\r\nimport { Color, ColorDistanceMatrix } from '../../Models/color';\r\nimport { CloseColorRow } from './close-color-row';\r\n\r\nimport { HashLink } from 'react-router-hash-link';\r\n\r\ninterface ColorRowProps {\r\n    brand: string;\r\n    color: Color;\r\n    colors: ColorDistanceMatrix;\r\n}\r\n\r\nconst DEFAULT_EXPANDED_CLASS = '';\r\nconst ACTIVE_CLASS = 'active';\r\n\r\n\r\nexport const ColorRow = (props: ColorRowProps) =>{\r\n    const { brand, color, colors } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const onRowClick = React.useCallback(() => {\r\n        setExpanded(!expanded);\r\n    }, [expanded]);\r\n\r\n\r\n    const className = expanded ? ACTIVE_CLASS : DEFAULT_EXPANDED_CLASS;\r\n    return (\r\n        <tbody className={`${className}`}>\r\n            <tr className='clickable' onClick={onRowClick}>\r\n                <td className='text-center' id={color.number}>{color.number}</td>\r\n                <td style={{backgroundColor: '#' + color.rgbCode}}/>\r\n                <td>{color.description}</td>\r\n                <td>{color.substitute ? Object.keys(color.substitute).map(brand => (\r\n                    <HashLink key={brand + color.substitute![brand]} smooth to={`/${brand.toLowerCase()}#${color.substitute![brand]}`}>\r\n                        {brand} {color.substitute![brand]}\r\n                    </HashLink>\r\n                )) : undefined}\r\n                </td>\r\n                {color.distances.slice(0, 5).map(closeColor =>\r\n                    <td\r\n                        key={closeColor.number}\r\n                        title={`${closeColor.number} - ${colors[closeColor.number].description}`}\r\n                        style={{backgroundColor: '#' + colors[closeColor.number].rgbCode}}\r\n                    />\r\n                )}\r\n            </tr>\r\n            <tr className={expanded ? '' : 'hidden'}>\r\n                <td colSpan={9}>\r\n                <div className='row inner bold'>\r\n                    <div className='col-2 text-center'>{brand} #</div>\r\n                    <div className='col-4'>Name</div>\r\n                    <div className='col-3 text-center'>Alternative</div>\r\n                    <div className='col-3 text-center'>Original</div>\r\n                </div>\r\n                    {color.distances.slice(0, 5).map(closeColor =>\r\n                        <CloseColorRow\r\n                            key={closeColor.number}\r\n                            brand={brand}\r\n                            visible={expanded}\r\n                            color={color}\r\n                            closeColor={colors[closeColor.number]}\r\n                        />\r\n                    )}\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { ColorDistanceMatrix } from '../../Models/color';\r\nimport { ColorRow } from './color-row';\r\nimport './color-table.css';\r\n\r\ninterface ColorTableProps {\r\n    brand: string;\r\n    colors: ColorDistanceMatrix;\r\n    filteredColors: string[];\r\n}\r\n\r\nexport const ColorTable = React.memo((props: ColorTableProps) => {\r\n    const { brand, colors, filteredColors } = props;\r\n    return (\r\n        <table className='table table-hover color-table table-borderless'>\r\n            <thead>\r\n                <tr>\r\n                    <th className='text-center'>{brand} #</th>\r\n                    <th className='text-center'>Color</th>\r\n                    <th>Name</th>\r\n                    <th>Substitute</th>\r\n                    <th className='text-center' colSpan={5}>Closest Colors</th>\r\n                </tr>\r\n            </thead>\r\n            {filteredColors.map((id: string) => {\r\n                return <ColorRow key={id} brand={brand} color={colors[id]} colors={colors} />;\r\n            })}\r\n        </table>\r\n    );\r\n});\r\n","import * as React from 'react';\r\nimport { Color, ColorDistanceMatrix } from '../Models/color';\r\nimport { ColorTable } from './ColorTable/color-table';\r\nimport './color-tool.css'\r\n\r\ninterface ColorTableProps {\r\n    brand: string,\r\n    colors: ColorDistanceMatrix,\r\n}\r\n\r\nconst DEFAULT_ARRAY: string[] = [];\r\nexport const ColorTool = (props: ColorTableProps) => {\r\n    const { brand, colors } = props;\r\n\r\n    const [filterText, setFilterText] = React.useState('');\r\n    const [appliedFilter, setAppliedFilter] = React.useState(filterText);\r\n\r\n    const filteredColors = React.useMemo(() => {\r\n        const filteredColors = appliedFilter\r\n            ? Object.keys(colors).filter(colorId => {\r\n                const color: Color = colors[colorId];\r\n                return color.description.toLowerCase().includes(appliedFilter) ||\r\n                    color.number.includes(appliedFilter);\r\n            })\r\n            : Object.keys(colors);\r\n\r\n        return filteredColors;\r\n    }, [appliedFilter, colors]);\r\n\r\n    const timer = React.useRef(0);\r\n\r\n    const applyFilter = React.useCallback(() => {\r\n        const trimmedFilter = filterText?.trim().toLowerCase();\r\n        setAppliedFilter(trimmedFilter);\r\n    }, [filterText]);\r\n\r\n    React.useEffect(() => {\r\n        if (timer.current) {\r\n            window.clearTimeout(timer.current);\r\n        }\r\n\r\n        timer.current = window.setTimeout(applyFilter, 250);\r\n    }, [filterText, applyFilter])\r\n\r\n    React.useEffect(() => {\r\n        return () => {\r\n            window.clearTimeout(timer.current);\r\n        }\r\n    }, [])\r\n\r\n    const onInputChanged = React.useCallback((event: {target: { value: string}}) => {\r\n        setFilterText(event.target.value);\r\n    }, []);\r\n\r\n    return (<>\r\n        <h1 className='text-center'>{brand} Color Substitute Chart</h1>\r\n        <div className='row'>\r\n            <div className='col-xs-12 col-sm-6'>\r\n                <input className='form-control filter' type='text' onChange={onInputChanged} placeholder={`Search for ${brand} # or color name`} value={filterText} />\r\n            </div>\r\n        </div>\r\n        <ColorTable brand={brand} colors={colors} filteredColors={filteredColors || DEFAULT_ARRAY} />\r\n    </>);\r\n}","import * as React from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link,\n    useParams\n} from 'react-router-dom';\nimport './App.css';\nimport { ColorTool } from './Components/color-tool';\nimport { AllColors } from './Models/color';\n\nconst allColors: AllColors = require('./Resources/colors.json');\n\nconst brands = Object.keys(allColors);\n\nconst App = () => {\n    // TODO: Add routing\n    // * [X]add react router using browser router\n    // * [X] Attach DMC and Anchor routes to point to appropriate lists\n    // * [X] Make sure linking still works\n    // * [X] Add linking to brand substitutes\n    // * [X] Make it work on GitHub\n    // TODO: UX Overhaul\n    // * What should expanded rows look like?\n    // * What should it look like when jumping around via links?\n    // * Improve the DOM/Keyboard/Accessibility\n    // TODO: Calculate anchor substitutions for colors that don't have one\n    // TODO: Fix Favicons\n\n    return (<Router basename='/floss-color-tool' >\n        <Route path='/:brand?'>\n            <RoutedApp/>\n        </Route>\n    </Router>)\n}\n\nconst RoutedApp = () => {\n    const { brand: brandParam } = useParams<{brand?: string}>();\n\n    const brand = (brandParam && brands.find(brand => brand.toLowerCase() === brandParam.toLowerCase()))\n        ?? brands[0];\n    const colors = allColors[brand];\n\n    return (<>\n        <nav className=\"navbar fixed-top navbar-expand navbar-light bg-light\">\n            <div className=\"container-fluid\">\n                <span className=\"navbar-brand\">Floss Color Tool</span>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-0\">\n                        {brands.map(brandName => (\n                            <li key={brandName} className=\"nav-item\">\n                                <Link key={brandName} to={`/${brandName.toLowerCase()}`} className={`nav-link ${brandName === brand ? 'active' : ''}`}>{brandName}</Link>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n        </nav>\n        <div className='container app-body'>\n            <div className='row'>\n                <div className='col-xs-12 col-sm-10 offset-sm-1 col-lg-8 offset-lg-2'>\n                    <ColorTool brand={brand} colors={colors} />\n                </div>\n            </div>\n        </div>\n    </>)\n}\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (!installingWorker) {\n                return;\n            }\n\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.'); // tslint:disable-line\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.'); // tslint:disable-line\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error); // tslint:disable-line\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}