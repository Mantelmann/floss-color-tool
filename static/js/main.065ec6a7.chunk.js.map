{"version":3,"sources":["Resources/chevron-right.svg","Components/ColorTable/close-color-row.tsx","Components/ColorTable/color-row.tsx","Components/ColorTable/color-table.tsx","Components/color-tool.tsx","App.tsx","index.tsx","registerServiceWorker.ts"],"names":["module","exports","CloseColorRow","props","brand","closeColor","color","visible","className","smooth","to","toLowerCase","number","description","style","backgroundColor","rgbCode","minHeight","ColorRow","colors","React","expanded","setExpanded","onRowClick","onClick","id","aria-expanded","aria-label","title","alt","role","src","chevronRight","minWidth","substitute","Object","keys","map","key","undefined","distances","slice","colSpan","ColorTable","filteredColors","DEFAULT_ARRAY","ColorTool","filterText","appliedFilter","setAppliedFilter","filter","colorId","includes","timer","applyFilter","trimmedFilter","trim","current","window","clearTimeout","setTimeout","allColors","require","brands","RoutedApp","brandParam","useParams","setFilterText","onInputChanged","event","target","value","find","aria-level","brandName","type","placeholder","onChange","App","basename","path","ReactDOM","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.065ec6a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chevron-right.cb01ceea.svg\";","import * as React from 'react';\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport { Color } from '../../Models/color';\r\n\r\n\r\ninterface CloseColorRowProps {\r\n    color: Color;\r\n    closeColor: Color;\r\n    visible: boolean;\r\n    brand: string;\r\n}\r\n\r\nexport const CloseColorRow = (props: CloseColorRowProps) => {\r\n    const { brand, closeColor, color, visible } = props;\r\n    return visible ? (\r\n        <div className='row inner'>\r\n            <div className='col-2 text-center vertically-centered'><HashLink smooth to={`/${brand.toLowerCase()}#${closeColor.number}`}>{closeColor.number}</HashLink></div>\r\n            <div className='col-4 vertically-centered'>{closeColor.description}</div>\r\n            <div className='col-3' style={{backgroundColor: '#' + closeColor.rgbCode, minHeight: '38px'}} />\r\n            <div className='col-3' style={{backgroundColor: '#' + color.rgbCode, minHeight: '38px'}} />\r\n        </div>\r\n    ) : null;\r\n}\r\n","import * as React from 'react';\r\nimport { Color, ColorDistanceMatrix } from '../../Models/color';\r\nimport chevronRight from '../../Resources/chevron-right.svg'\r\nimport { CloseColorRow } from './close-color-row';\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport './color-row.css';\r\n\r\ninterface ColorRowProps {\r\n    brand: string;\r\n    color: Color;\r\n    colors: ColorDistanceMatrix;\r\n}\r\n\r\nconst DEFAULT_EXPANDED_CLASS = '';\r\nconst ACTIVE_CLASS = 'active';\r\n\r\n\r\nexport const ColorRow = (props: ColorRowProps) =>{\r\n    const { brand, color, colors } = props;\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const onRowClick = React.useCallback(() => {\r\n        setExpanded(!expanded);\r\n    }, [expanded]);\r\n\r\n    const className = expanded ? ACTIVE_CLASS : DEFAULT_EXPANDED_CLASS;\r\n    return (\r\n        <tbody className={`${className}`}>\r\n            <tr className='color-row' onClick={onRowClick}>\r\n                <td>\r\n                    <button\r\n                        id={color.number}\r\n                        className={`icon-button ${expanded ? 'expanded' : ''}`}\r\n                        aria-expanded={expanded}\r\n                        aria-label={\"Show/Hide details\"}\r\n                        title={expanded ? \"Hide details\" : \"Show details\"}\r\n                        onClick={onRowClick}\r\n                    >\r\n                        <img alt=\"\" role=\"presentation\" src={chevronRight} />\r\n                    </button>\r\n                </td>\r\n                <td className='text-center'>{color.number}</td>\r\n                <td style={{backgroundColor: '#' + color.rgbCode, minWidth: \"30px\"}}/>\r\n                <td>{color.description}</td>\r\n                <td>{color.substitute ? Object.keys(color.substitute).map(brand => (\r\n                    <HashLink key={brand + color.substitute![brand]} smooth to={`/${brand.toLowerCase()}#${color.substitute![brand]}`}>\r\n                        {brand} {color.substitute![brand]}\r\n                    </HashLink>\r\n                )) : undefined}\r\n                </td>\r\n                {color.distances.slice(0, 5).map(closeColor =>\r\n                    <td\r\n                        key={closeColor.number}\r\n                        className=\"close-color-block\"\r\n                        title={`${closeColor.number} - ${colors[closeColor.number].description}`}\r\n                        style={{backgroundColor: '#' + colors[closeColor.number].rgbCode}}\r\n                    />\r\n                )}\r\n            </tr>\r\n            <tr className={expanded ? '' : 'hidden'}>\r\n                <td colSpan={10}>\r\n                <div className='row inner bold'>\r\n                    <div className='col-2 text-center'>{brand} #</div>\r\n                    <div className='col-4'>Name</div>\r\n                    <div className='col-3 text-center'>Alternative</div>\r\n                    <div className='col-3 text-center'>Original</div>\r\n                </div>\r\n                    {color.distances.slice(0, 5).map(closeColor =>\r\n                        <CloseColorRow\r\n                            key={closeColor.number}\r\n                            brand={brand}\r\n                            visible={expanded}\r\n                            color={color}\r\n                            closeColor={colors[closeColor.number]}\r\n                        />\r\n                    )}\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { ColorDistanceMatrix } from '../../Models/color';\r\nimport { ColorRow } from './color-row';\r\nimport './color-table.css';\r\n\r\ninterface ColorTableProps {\r\n    brand: string;\r\n    colors: ColorDistanceMatrix;\r\n    filteredColors: string[];\r\n}\r\n\r\nexport const ColorTable = React.memo((props: ColorTableProps) => {\r\n    const { brand, colors, filteredColors } = props;\r\n    return (\r\n        <table className='table color-table table-borderless'>\r\n            <thead>\r\n                <tr>\r\n                    <th colSpan={4} className='text-center'>{brand} Color</th>\r\n                    <th className='text-center' colSpan={6}>Substitutes</th>\r\n                </tr>\r\n            </thead>\r\n            {filteredColors.map((id: string) => {\r\n                return <ColorRow key={id} brand={brand} color={colors[id]} colors={colors} />;\r\n            })}\r\n        </table>\r\n    );\r\n});\r\n","import * as React from 'react';\r\nimport { Color, ColorDistanceMatrix } from '../Models/color';\r\nimport { ColorTable } from './ColorTable/color-table';\r\nimport './color-tool.css'\r\n\r\ninterface ColorTableProps {\r\n    brand: string,\r\n    colors: ColorDistanceMatrix,\r\n    filterText: string;\r\n}\r\n\r\nconst DEFAULT_ARRAY: string[] = [];\r\nexport const ColorTool = (props: ColorTableProps) => {\r\n    const { brand, colors, filterText } = props;\r\n\r\n    const [appliedFilter, setAppliedFilter] = React.useState(filterText);\r\n\r\n    const filteredColors = React.useMemo(() => {\r\n        const filteredColors = appliedFilter\r\n            ? Object.keys(colors).filter(colorId => {\r\n                const color: Color = colors[colorId];\r\n                return color.description.toLowerCase().includes(appliedFilter) ||\r\n                    color.number.includes(appliedFilter);\r\n            })\r\n            : Object.keys(colors);\r\n\r\n        return filteredColors;\r\n    }, [appliedFilter, colors]);\r\n\r\n    const timer = React.useRef(0);\r\n\r\n    const applyFilter = React.useCallback(() => {\r\n        const trimmedFilter = filterText?.trim().toLowerCase();\r\n        setAppliedFilter(trimmedFilter);\r\n    }, [filterText]);\r\n\r\n    React.useEffect(() => {\r\n        if (timer.current) {\r\n            window.clearTimeout(timer.current);\r\n        }\r\n\r\n        timer.current = window.setTimeout(applyFilter, 250);\r\n    }, [filterText, applyFilter])\r\n\r\n    React.useEffect(() => {\r\n        return () => {\r\n            window.clearTimeout(timer.current);\r\n        }\r\n    }, [])\r\n\r\n    return (<>\r\n        <ColorTable brand={brand} colors={colors} filteredColors={filteredColors || DEFAULT_ARRAY} />\r\n    </>);\r\n}","import * as React from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link,\n    useParams,\n} from 'react-router-dom';\nimport './App.css';\nimport { ColorTool } from './Components/color-tool';\nimport { AllColors } from './Models/color';\n\nconst allColors: AllColors = require('./Resources/colors.json');\n\nconst brands = Object.keys(allColors);\n\nconst App = () => {\n    // TODO: UX Overhaul\n    // * [X] Move search into navbar\n    // * [X] Add expand/collapse icon\n    // * [X] Add a background to the row when it has focus within\n    // * [ ] Fixed table header?\n    // * Improve the DOM/Keyboard/Accessibility\n    //    * [X] Allow expanding/collapsing via keyboard\n    //    * [ ] Allow arrow keys to move within the grid? (do I need to use office fabric focus zone component?)\n    // TODO: Calculate anchor substitutions for colors that don't have one\n    // TODO: Fix Favicons\n    // TODO: Add \"favorites\" section?\n    // TODO: Clear the filter when the location changes\n\n    return (<Router basename='/floss-color-tool' >\n        <Route path='/:brand?'>\n            <RoutedApp/>\n        </Route>\n    </Router>)\n}\n\nconst RoutedApp = () => {\n    const { brand: brandParam } = useParams<{brand?: string}>();\n    const [filterText, setFilterText] = React.useState('');\n\n    const onInputChanged = React.useCallback((event: {target: { value: string}}) => {\n        setFilterText(event.target.value);\n    }, []);\n\n    const brand = (brandParam && brands.find(brand => brand.toLowerCase() === brandParam.toLowerCase()))\n        ?? brands[0];\n    const colors = allColors[brand];\n\n    return (<>\n        <nav className=\"navbar fixed-top navbar-expand navbar-light bg-light\">\n            <div className=\"container-fluid\">\n                <span role=\"heading\" aria-level={1} className=\"navbar-brand\">Floss Color Tool</span>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-0\">\n                        {brands.map(brandName => (\n                            <li key={brandName} className=\"nav-item\">\n                                <Link key={brandName} to={`/${brandName.toLowerCase()}`} className={`nav-link ${brandName === brand ? 'active' : ''}`}>{brandName}</Link>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n                <form className=\"d-flex col-md-5\">\n                    <input\n                        className=\"form-control\"\n                        type=\"search\"\n                        placeholder={\"Search\"}\n                        aria-label={\"Search\"}\n                        value={filterText}\n                        onChange={onInputChanged}\n                    >\n                    </input>\n                </form>\n            </div>\n        </nav>\n        <div className='container-fl app-body'>\n            <div className='row'>\n                <div className='col-sm-10 offset-sm-1 col-xl-8 offset-xl-2'>\n                    <ColorTool brand={brand} colors={colors} filterText={filterText}/>\n                </div>\n            </div>\n        </div>\n    </>)\n}\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (!installingWorker) {\n                return;\n            }\n\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.'); // tslint:disable-line\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.'); // tslint:disable-line\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error); // tslint:disable-line\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}